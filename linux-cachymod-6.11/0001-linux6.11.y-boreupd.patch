# Update patch for BORE 5.7.10

* backport linux6.12.y-bore5.7.14
* change list_for_each_entry() to list_for_each_entry_rcu(), mitigates stutters
* skip ineligible tasks in update_child_burst_topologic(), CachyMod preference
* add list_empty() checks, improves spin rate


diff -uarp a/include/linux/sched/bore.h b/include/linux/sched/bore.h
--- a/include/linux/sched/bore.h
+++ b/include/linux/sched/bore.h
@@ -4,7 +4,7 @@
 
 #ifndef _LINUX_SCHED_BORE_H
 #define _LINUX_SCHED_BORE_H
-#define SCHED_BORE_VERSION "5.7.10"
+#define SCHED_BORE_VERSION "5.7.14"
 
 #ifdef CONFIG_SCHED_BORE
 extern u8   __read_mostly sched_bore;
@@ -26,7 +26,7 @@ extern void restart_burst(struct sched_e
 extern void restart_burst_rescale_deadline(struct sched_entity *se);
 
 extern int sched_bore_update_handler(const struct ctl_table *table, int write,
-		void __user *buffer, size_t *lenp, loff_t *ppos);
+	void __user *buffer, size_t *lenp, loff_t *ppos);
 
 extern void sched_clone_bore(
 	struct task_struct *p, struct task_struct *parent, u64 clone_flags);
diff -uarp a/kernel/sched/bore.c b/kernel/sched/bore.c
--- a/kernel/sched/bore.c
+++ b/kernel/sched/bore.c
@@ -121,7 +121,7 @@ void restart_burst_rescale_deadline(stru
 }
 
 static inline bool task_is_bore_eligible(struct task_struct *p)
-{return p->sched_class == &fair_sched_class;}
+{return p && p->sched_class == &fair_sched_class && !p->exit_state;}
 
 static void reset_task_weights_bore(void) {
 	struct task_struct *task;
@@ -132,15 +132,16 @@ static void reset_task_weights_bore(void
 	for_each_process(task) {
 		if (!task_is_bore_eligible(task)) continue;
 		rq = task_rq(task);
-		rq_lock_irqsave(rq, &rf);
+		rq_pin_lock(rq, &rf);
+		update_rq_clock(rq);
 		reweight_task_by_prio(task, effective_prio(task));
-		rq_unlock_irqrestore(rq, &rf);
+		rq_unpin_lock(rq, &rf);
 	}
 	write_unlock_irq(&tasklist_lock);
 }
 
 int sched_bore_update_handler(const struct ctl_table *table, int write,
-		void __user *buffer, size_t *lenp, loff_t *ppos) {
+	void __user *buffer, size_t *lenp, loff_t *ppos) {
 	int ret = proc_dou8vec_minmax(table, write, buffer, lenp, ppos);
 	if (ret || !write)
 		return ret;
@@ -151,7 +152,8 @@ int sched_bore_update_handler(const stru
 }
 
 #define for_each_child(p, t) \
-	list_for_each_entry(t, &(p)->children, sibling)
+	list_for_each_entry_rcu(t, &(p)->children, sibling, \
+		lockdep_is_held(&tasklist_lock))
 
 static u32 count_children_max2(struct task_struct *p) {
 	u32 cnt = 0;
@@ -164,7 +166,7 @@ static inline bool burst_cache_expired(s
 {return (s64)(bc->timestamp + sched_burst_cache_lifetime - now) < 0;}
 
 static void update_burst_cache(struct sched_burst_cache *bc,
-		struct task_struct *p, u32 cnt, u32 sum, u64 now) {
+	struct task_struct *p, u32 cnt, u32 sum, u64 now) {
 	u8 avg = cnt ? sum / cnt : 0;
 	bc->score = max(avg, p->se.burst_penalty);
 	bc->count = cnt;
@@ -184,9 +186,14 @@ static inline void update_child_burst_di
 	update_burst_cache(&p->se.child_burst, p, cnt, sum, now);
 }
 
-static inline u8 inherit_burst_direct(struct task_struct *p, u64 now) {
+static inline u8 inherit_burst_direct(
+	struct task_struct *p, u64 now, u64 clone_flags) {
 	struct task_struct *parent = p;
-	if (burst_cache_expired(&parent->se.child_burst, now))
+
+	if (clone_flags & CLONE_PARENT)
+		parent = parent->real_parent;
+
+	if (burst_cache_expired(&parent->se.child_burst, now) && !list_empty(&parent->children))
 		update_child_burst_direct(parent, now);
 
 	return parent->se.child_burst.score;
@@ -199,11 +206,12 @@ static void update_child_burst_topologic
 
 	for_each_child(p, child) {
 		dec = child;
-		while ((dcnt = count_children_max2(dec)) == 1)
+		while (dec && (dcnt = count_children_max2(dec)) == 1)
 			dec = list_first_entry(&dec->children, struct task_struct, sibling);
 		
+		if (!task_is_bore_eligible(dec)) continue;
+
 		if (!dcnt || !depth) {
-			if (!task_is_bore_eligible(dec)) continue;
 			cnt++;
 			sum += dec->se.burst_penalty;
 			continue;
@@ -214,7 +222,8 @@ static void update_child_burst_topologic
 			if (sched_burst_cache_stop_count <= cnt) break;
 			continue;
 		}
-		update_child_burst_topological(dec, now, depth - 1, &cnt, &sum);
+		if (!list_empty(&dec->children))
+			update_child_burst_topological(dec, now, depth - 1, &cnt, &sum);
 	}
 
 	update_burst_cache(&p->se.child_burst, p, cnt, sum, now);
@@ -222,15 +231,25 @@ static void update_child_burst_topologic
 	*asum += sum;
 }
 
-static inline u8 inherit_burst_topological(struct task_struct *p, u64 now) {
+static inline u8 inherit_burst_topological(
+	struct task_struct *p, u64 now, u64 clone_flags) {
 	struct task_struct *anc = p;
 	u32 cnt = 0, sum = 0;
+	u32 base_child_cnt = 0;
+
+	if (clone_flags & CLONE_PARENT) {
+		anc = anc->real_parent;
+		base_child_cnt = 1;
+	}
 
 	for (struct task_struct *next;
-		 anc != (next = anc->real_parent) && count_children_max2(anc) <= 1;
-		 anc = next) {}
+		 anc != (next = anc->real_parent) &&
+			count_children_max2(anc) <= base_child_cnt;) {
+		anc = next;
+		base_child_cnt = 1;
+	}
 
-	if (burst_cache_expired(&anc->se.child_burst, now))
+	if (burst_cache_expired(&anc->se.child_burst, now) && !list_empty(&anc->children))
 		update_child_burst_topological(
 			anc, now, sched_burst_fork_atavistic - 1, &cnt, &sum);
 
@@ -251,7 +270,7 @@ static inline void update_tg_burst(struc
 }
 
 static inline u8 inherit_burst_tg(struct task_struct *p, u64 now) {
-	struct task_struct *parent = p->group_leader;
+	struct task_struct *parent = rcu_dereference(p->group_leader);
 	if (burst_cache_expired(&parent->se.group_burst, now))
 		update_tg_burst(parent, now);
 
@@ -260,25 +279,26 @@ static inline u8 inherit_burst_tg(struct
 
 void sched_clone_bore(
 	struct task_struct *p, struct task_struct *parent, u64 clone_flags) {
+	struct sched_entity *se = &p->se;
 	u64 now;
 	u8 penalty;
 
 	if (!task_is_bore_eligible(p)) return;
 
-	read_lock(&tasklist_lock);
-	now = jiffies_to_nsecs(jiffies);
 	if (clone_flags & CLONE_THREAD) {
+		rcu_read_lock();
+		now = jiffies_to_nsecs(jiffies);
 		penalty = inherit_burst_tg(parent, now);
+		rcu_read_unlock();
 	} else {
-		if (clone_flags & CLONE_PARENT)
-			parent = parent->real_parent;
+		read_lock(&tasklist_lock);
+		now = jiffies_to_nsecs(jiffies);
 		penalty = likely(sched_burst_fork_atavistic) ?
-			inherit_burst_topological(parent, now):
-			inherit_burst_direct(parent, now);
+			inherit_burst_topological(parent, now, clone_flags):
+			inherit_burst_direct(parent, now, clone_flags);
+		read_unlock(&tasklist_lock);
 	}
-	read_unlock(&tasklist_lock);
 
-	struct sched_entity *se = &p->se;
 	revolve_burst_penalty(se);
 	se->burst_penalty = se->prev_burst_penalty =
 		max(se->prev_burst_penalty, penalty);
