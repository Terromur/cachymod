# PKGBUILD originated from CachyOS, modified for CachyMod.
# https://github.com/marioroy/cachymod

# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr Gorski <piotrgorski@cachyos.org>
# Maintainer: Vasiliy Stelmachenok <ventureo@cachyos.org>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

# https://wiki.archlinux.org/title/PKGBUILD

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null or choose proper variable to enable them

### Tweak kernel options prior to a build via nconfig or gconfig
_makenconfig=${_makenconfig-}
_makegconfig=${_makegconfig-}

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
# See, https://bugs.archlinux.org/task/31187
# It seems that in 2023 this is not really a huge regression anymore
_NUMAdisable=${_NUMAdisable-}

### Transparent Hugepages
# ATTENTION - one of two predefined values should be selected!
# 'always'  - always enable THP
# 'madvise' - madvise, prevent applications from allocating more memory resources than necessary
# More infos here:
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/performance_tuning_guide/sect-red_hat_enterprise_linux-performance_tuning_guide-configuring_transparent_huge_pages
_hugepage=${_hugepage-always}

# Compile ONLY used modules to VASTLY reduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=${_localmodcfg-}

# Path to the list of used modules
_localmodcfg_path=${_localmodcfg_path-"$HOME/.config/modprobed.db"}

### Running with a 1000HZ, 800Hz, 600Hz, or 500Hz tick rate
_HZ_ticks=${_HZ_ticks-1000}

### Choose between full or idle tickless type
### Full tickless can give higher performances in various cases but, depending on
### hardware, lower consistency. Idle (without rcu_nocb_cpu) may reduce stutters.
_ticktype=${_ticktype-full}

### Choose between rt(real-time), full(low-latency), or lazy(prefer throughput)
_preempt=${_preempt-full}

# This does automatically detect your supported CPU and optimizes for it
_use_auto_optimization=${_use_auto_optimization-y}

# CPU compiler optimizations (overrides _use_auto_optimization)
# { native_amd, native_intel, zen, zen2, zen3, zen4, generic,
#   generic_v1, generic_v2, generic_v3, generic_v4, sandybridge,
#   ivybridge, haswell, skylake, icelake, tigerlake, alderlake }
_processor_opt=${_processor_opt-}

# Select build type { full, thin, clang, gcc }
# full:  Build the kernel with clang (full LTO), suffix "-lto"
#        Uses 1 thread for linking, slow and uses more memory (>14GB),
#        theoretically with the highest performance gains
# thin:  Build the kernel with clang (thin LTO), suffix "-lto"
#        Uses multiple threads, faster and lesser memory consumption,
#        possibly lower runtime performance than full
# clang: Build the kernel with clang (no LTO), suffix "-clang"
# gcc:   Build the kernel with gcc, suffix "-gcc"
_buildtype=${_buildtype-gcc}

_pkgsuffix=cachymod-612

if [[ "$_buildtype" = "thin" || "$_buildtype" = "full" ]]; then
    buildtype="lto"
else
    buildtype="$_buildtype"
fi

pkgbase="linux-$_pkgsuffix"
if [ "$_preempt" = "rt" ]; then
    pkgbase="${pkgbase}-${buildtype}-rt"
else
    pkgbase="${pkgbase}-${buildtype}"
fi

_major=6.12
_minor=4
pkgver=${_major}.${_minor}
_stable=${_major}.${_minor}
_srcname=linux-${_stable}
pkgdesc='Linux BORE + Lazy Preemption + Cachy Sauce Kernel by CachyOS with other patches and improvements'
pkgrel=1
_kernver="$pkgver-$pkgrel"
_kernuname="${pkgver}-${_pkgsuffix}"
arch=('x86_64')
url="https://github.com/marioroy/cachymod"
license=('GPL-2.0-only')
options=('!strip' '!debug' '!lto')

makedepends=(bc cpio gettext libelf pahole perl python tar xz zstd)

source=(
    "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
    "config"
    "config.sh"
    "trim.sh"
    "auto-cpu-optimization.sh"
    "mkinitcpio.template"
    "0001-rt.patch"
    "0001-preempt-lazy.patch"
    "0001-cachyos-base-all.patch"
    "0001-sched-fair-remove-cachy-mods.patch"
    "0001-linux6.12.y-bore.patch"
    "0001-linux6.12.y-borelite.patch"
    "0002-change-750hz-to-800hz.patch"
    "0100-mm-kconfig-enable-rt-thp.patch"
    "0200-clearlinux-extras.patch")

# LLVM makedepends
if [[ "$buildtype" = "lto" || "$buildtype" = "clang" ]]; then
    makedepends+=( clang llvm lld )
    source+=("dkms-clang.patch")
    BUILD_FLAGS=( CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 )
else
    BUILD_FLAGS=( CC=gcc )
fi

# Append extra sources in PKGBUILD.lazy.sh
[ -n "$_extra_patch_or_url1" ] && source+=("$_extra_patch_or_url1")
[ -n "$_extra_patch_or_url2" ] && source+=("$_extra_patch_or_url2")
[ -n "$_extra_patch_or_url3" ] && source+=("$_extra_patch_or_url3")
[ -n "$_extra_patch_or_url4" ] && source+=("$_extra_patch_or_url4")
[ -n "$_extra_patch_or_url5" ] && source+=("$_extra_patch_or_url5")

export KBUILD_BUILD_HOST=cachyos
export KBUILD_BUILD_USER="$pkgbase"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

_die() { error "$@" ; exit 1; }

prepare() {
    cd "$_srcname"

    echo "Setting version..."
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname

    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        src="${src%.zst}"
        [[ $src = *.patch ]] || continue
        if [[ "$src" = *"0001-rt.patch" && "$_preempt" != "rt" ]]; then
            # Skip unless building a kernel with real-time preemption.
            continue
        fi
        echo "Applying patch $src..."
        patch -Np1 < "../$src"
    done

    echo "Setting config..."
    cp ../config .config

    ### Select CPU optimization (default Generic)
    if [ -n "$_processor_opt" ]; then
        ### Use manual CPU optimization
        MARCH="${_processor_opt^^}"
        if [ "$MARCH" != "GENERIC" ]; then
            if [[ "$MARCH" =~ GENERIC_V[1-4] ]]; then
                X86_64_LEVEL="${MARCH//GENERIC_V}"
                scripts/config --set-val X86_64_VERSION "${X86_64_LEVEL}"
            else
                scripts/config -k -d CONFIG_GENERIC_CPU
                scripts/config -k -e "CONFIG_M${MARCH}"
            fi
        fi
    elif [ -n "$_use_auto_optimization" ]; then
        ### Use automatic CPU optimization
        "${srcdir}"/auto-cpu-optimization.sh
    fi

    ### Selecting CachyOS config
    echo "Enabling CachyOS config..."
    scripts/config -e CACHY

    ### Enable the BORE CPU scheduler
    echo "Enabling BORE CPU scheduler..."
    scripts/config -e SCHED_BORE

    ### Enable sched_ext scheduler
    if [[ -n "$_enable_sched_ext" && "$_preempt" != "rt" ]]; then
        echo "Enabling the sched_ext (SCX) scheduler..."
        scripts/config -e SCHED_CLASS_EXT
    else
        scripts/config -d SCHED_CLASS_EXT
    fi

    ### Select build type
    [ -z "$_buildtype" ] && _die "The value is empty. Choose the correct one again."

    case "$_buildtype" in
        thin)
            scripts/config -e LTO -e LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG_THIN -d LTO_NONE -e HAS_LTO_CLANG -d LTO_CLANG_FULL -e LTO_CLANG_THIN -e HAVE_GCC_PLUGINS
            ;;
        full)
            scripts/config -e LTO -e LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG_THIN -d LTO_NONE -e HAS_LTO_CLANG -e LTO_CLANG_FULL -d LTO_CLANG_THIN -e HAVE_GCC_PLUGINS
            ;;
        clang | gcc)
            scripts/config -e LTO_NONE
            ;;
        *)
            _die "The value '$_buildtype' is invalid. Choose the correct one again."
    esac

    if [ "$buildtype" = "lto" ]; then
        echo "Selecting 'clang' compiler, '$_buildtype' LLVM level..."
    else
        echo "Selecting '$_buildtype' compiler, no LTO..."
    fi

    ### Select tick rate
    [ -z "$_HZ_ticks" ] && _die "The value is empty. Choose the correct one again."

    case "$_HZ_ticks" in
        1000|800|600|500)
            scripts/config -d HZ_800 -d HZ_300 -e "HZ_${_HZ_ticks}" --set-val HZ "${_HZ_ticks}";;
        *)
            _die "The value $_HZ_ticks is invalid. Choose the correct one again."
    esac

    echo "Setting tick rate to ${_HZ_ticks}Hz..."

    ### Disable NUMA
    if [ -n "$_NUMAdisable" ]; then
        echo "Disabling NUMA from kernel config..."
        scripts/config -d NUMA \
            -d AMD_NUMA \
            -d X86_64_ACPI_NUMA \
            -d NODES_SPAN_OTHER_NODES \
            -d NUMA_EMU \
            -d USE_PERCPU_NUMA_NODE_ID \
            -d ACPI_NUMA \
            -d ARCH_SUPPORTS_NUMA_BALANCING \
            -d NODES_SHIFT \
            -u NODES_SHIFT \
            -d NEED_MULTIPLE_NODES \
            -d NUMA_BALANCING \
            -d NUMA_BALANCING_DEFAULT_ENABLED
    fi

    ### Select tickless type
    [ -z "$_ticktype" ] && _die "The value is empty. Choose the correct one again."

    case "$_ticktype" in
        full)
            scripts/config -d HZ_PERIODIC -d NO_HZ_IDLE -d CONTEXT_TRACKING_FORCE -e NO_HZ_FULL_NODEF -e NO_HZ_FULL -e NO_HZ -e NO_HZ_COMMON -e CONTEXT_TRACKING
            ;;
        idle)
            scripts/config -d HZ_PERIODIC -d NO_HZ_FULL -e NO_HZ_IDLE -e NO_HZ -e NO_HZ_COMMON
            scripts/config -d RCU_NOCB_CPU -d TICK_CPU_ACCOUNTING -e VIRT_CPU_ACCOUNTING_GEN
            ;;
        *)
            _die "The value '$_ticktype' is invalid. Choose the correct one again."
    esac

    echo "Selecting '$_ticktype' tickless type..."

    ### Select preempt type
    [ -z "$_preempt" ] && _die "The value is empty. Choose the correct one again."

    case "$_preempt" in
        rt)
            scripts/config -e PREEMPT_BUILD -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -e PREEMPT -d PREEMPT_LAZY -e PREEMPT_COUNT -e PREEMPTION -e PREEMPT_DYNAMIC -e PREEMPT_RT
            ;;
        full)
            scripts/config -e PREEMPT_BUILD -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -e PREEMPT -d PREEMPT_LAZY -e PREEMPT_COUNT -e PREEMPTION -e PREEMPT_DYNAMIC -d PREEMPT_RT
            ;;
        lazy)
            scripts/config -e PREEMPT_BUILD -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -d PREEMPT -e PREEMPT_LAZY -e PREEMPT_COUNT -e PREEMPTION -e PREEMPT_DYNAMIC -d PREEMPT_RT
            ;;
        voluntary)
            scripts/config -e PREEMPT_BUILD -d PREEMPT_NONE -e PREEMPT_VOLUNTARY -d PREEMPT -d PREEMPT_LAZY -e PREEMPT_COUNT -e PREEMPTION -e PREEMPT_DYNAMIC -d PREEMPT_RT
            ;;
        *)
            _die "The value '$_preempt' is invalid. Choose the correct one again."
    esac

    echo "Selecting '$_preempt' preempt type..."

    echo "Enabling KBUILD_CFLAGS -O3..."
    scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

    echo "Disabling TCP_CONG_CUBIC..."
    scripts/config -m TCP_CONG_CUBIC -d DEFAULT_CUBIC -e TCP_CONG_BBR -e DEFAULT_BBR \
        --set-str DEFAULT_TCP_CONG bbr

    ### Select THP
    [ -z "$_hugepage" ] && _die "The value is empty. Choose the correct one again."

    case "$_hugepage" in
        always) scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE -e TRANSPARENT_HUGEPAGE_ALWAYS;;
        madvise) scripts/config -d TRANSPARENT_HUGEPAGE_ALWAYS -e TRANSPARENT_HUGEPAGE_MADVISE;;
        *) _die "The value '$_hugepage' is invalid. Choose the correct one again.";;
    esac

    echo "Selecting '$_hugepage' TRANSPARENT_HUGEPAGE config..."

    ### Run the config.sh script for kernel tuning
    if [[ -s "${srcdir}"/config.sh ]]; then
        echo "Further kernel customization. Running config.sh script..."
        bash "${srcdir}"/config.sh
    fi

    ### Optionally run the trim.sh script to trim the kernel
    if [[ -n "$_runtrim_script" && -s "${srcdir}"/trim.sh ]]; then
        echo "Further kernel trimming. Running trim.sh script..."
        bash "${srcdir}"/trim.sh
    fi

    ### Optionally disable DEBUG_INFO related knobs for more kernel trimming
    ### BPF and SCX will not work, used by all sorts of stuff including firewall
    ### This requires disabling the ananicy-cpp service or will segfault
    ### Hence, if you do not use these things, want to save time building,
    ### and unlikely to decode a stack trace later
    if [[ -n "$_disable_debug_info" && -z "$_enable_sched_ext" ]]; then
        echo "More kernel trimming. Disabling DEBUG_INFO knobs..."
        scripts/config -d GDB_SCRIPTS
        scripts/config -d DEBUG_INFO
        scripts/config -d DEBUG_INFO_BTF
        scripts/config -d DEBUG_INFO_BTF_MODULES
        scripts/config -d DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT
        scripts/config -d DEBUG_INFO_DWARF4
        scripts/config -d DEBUG_INFO_DWARF5
        scripts/config -e DEBUG_INFO_NONE
        scripts/config -d FTRACE
        scripts/config -d PAHOLE_HAS_SPLIT_BTF
        # Remove the BPF (Berkeley Packet Filter) from the list
        # CONFIG_LSM="landlock,lockdown,yama,integrity,bpf"
        scripts/config --set-str LSM "landlock,lockdown,yama,integrity"
    fi

    ### Optionally load needed modules for the make localmodconfig
    # See https://aur.archlinux.org/packages/modprobed-db
    if [[ -n "$_localmodcfg" ]]; then
        if [ -e "$_localmodcfg_path" ]; then
            echo "Running Steven Rostedt's make localmodconfig now"
            make "${BUILD_FLAGS[@]}" LSMOD="${_localmodcfg_path}" localmodconfig
        else
            _die "No modprobed.db data found"
        fi
    fi

    ### Rewrite configuration
    echo "Rewrite configuration..."
    make "${BUILD_FLAGS[@]}" prepare
    yes "" | make "${BUILD_FLAGS[@]}" config >/dev/null

    ### Prepared version
    make "${BUILD_FLAGS[@]}" -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
    [[ -z "$_makenconfig" ]] ||  make "${BUILD_FLAGS[@]}" nconfig

    ### Running make gconfig
    [[ -z "$_makegconfig" ]] ||  make "${BUILD_FLAGS[@]}" gconfig

    ### Save configuration for later reuse
    echo "Save configuration for later reuse..."
    local basedir="$(dirname "$(readlink "${srcdir}/config")")"
    cat .config > "${basedir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"
}

build() {
    cd "$_srcname"

    ### Respect -jN flag in /etc/makepkg.conf
    local ncpu=$(grep "^MAKEFLAGS=" "/etc/makepkg.conf" | sed "s/^.*-j\([0-9]*\).*/\1/")
    [[ -z "$ncpu" || "$ncpu" = "MAKEFLAGS"* ]] && ncpu=$(nproc)

    make "${BUILD_FLAGS[@]}" -j"$ncpu" all | \
       grep -Ev '^  (AS|AR|CC|LD|BT|CE|CO|GE|HO|IN|IP|MK|OB|PA|PE|PO|RE|ST|TA|TE|UN|UP|VD|X32)'
    if [[ -z "$_disable_debug_info" ]]; then
       make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1 | \
          grep -Ev '^  (AS|AR|CC|LD|BT|CE|CO|GE|HO|IN|MK|OB|PA|PE|PO|RE|ST|TA|TE|UN|UP|VD|X32)'
    fi

    local MODULE_FLAGS=(
       KERNEL_UNAME="${_kernuname}"
       IGNORE_PREEMPT_RT_PRESENCE=1
       SYSSRC="${srcdir}/${_srcname}"
       SYSOUT="${srcdir}/${_srcname}"
    )
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=('coreutils' 'kmod' 'initramfs')
    [ -n "$_enable_sched_ext" ] && depends+=('scx-scheds')
    optdepends=('wireless-regdb: to set the correct wireless channels of your country'
                'linux-firmware: firmware images needed for some devices'
                'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig'
                'uksmd: Userspace KSM helper daemon')
    provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE UKSMD-BUILTIN NTSYNC-MODULE)

    cd "$_srcname"

    local modulesdir="$pkgdir/usr/lib/modules/$(<version)"
    local flavour

    echo "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make "${BUILD_FLAGS[@]}" -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

    # Include mkinitcpio preset file, excluding PRESETS 'fallback'
    [ "$_preempt" = "rt" ] && flavour="${buildtype}-rt" || flavour="${buildtype}"

    install -Dm644 "${srcdir}/mkinitcpio.template" \
        "${pkgdir}/etc/mkinitcpio.d/linux-cachymod-612-${flavour}.preset"
    sed -i "s/__FLAVOUR__/${flavour}/" \
        "${pkgdir}/etc/mkinitcpio.d/linux-cachymod-612-${flavour}.preset"

    echo "Installing modules..."
    ZSTD_CLEVEL=6 make "${BUILD_FLAGS[@]}" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
        DEPMOD=/doesnt/exist modules_install | grep -Ev '^  (IN|SI|ST|ZS)' # Suppress depmod

    # remove build links
    rm "$modulesdir"/build
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
    depends=('pahole' "${pkgbase}")

    cd "${_srcname}"
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    echo "Installing build files..."
    if [[ -z "$_disable_debug_info" ]]; then
        install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
            localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
    else
        install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
            localversion.* version vmlinux
    fi
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts
    ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

    # required when STACK_VALIDATION is enabled
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

    # required when DEBUG_INFO_BTF_MODULES is enabled
    if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
        install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
    fi

    echo "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    echo "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    echo "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    echo "Removing documentation..."
    rm -r "$builddir/Documentation"

    echo "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    echo "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -Sib "$file")" in
            application/x-sharedlib\;*)      # Libraries (.so)
                strip -v $STRIP_SHARED "$file" ;;
            application/x-archive\;*)        # Libraries (.a)
                strip -v $STRIP_STATIC "$file" ;;
            application/x-executable\;*)     # Binaries
                strip -v $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) # Relocatable binaries
                strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    echo "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase")
pkgname+=("$pkgbase-headers")
for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
    }"
done

b2sums=('SKIP')
