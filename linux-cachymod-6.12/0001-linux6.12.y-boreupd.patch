# Update patch for BORE 5.7.13

* add rcu_read_lock/unlock statements to reset_task_weights_bore()
* enable recursion in update_child_burst_direct()
* add list_empty() checks


diff -uarp a/kernel/sched/bore.c b/kernel/sched/bore.c
--- a/kernel/sched/bore.c
+++ b/kernel/sched/bore.c
@@ -25,6 +25,7 @@ static int __maybe_unused maxval_u8
 static int __maybe_unused maxval_12_bits = 4095;
 
 #define MAX_BURST_PENALTY (39U <<2)
+#define MAX_DIRECT_DEPTH 6
 
 static inline u32 log2plus1_u64_u32f8(u64 v) {
 	u32 integral = fls64(v);
@@ -128,6 +129,7 @@ static void reset_task_weights_bore(void
 	struct rq *rq;
 	struct rq_flags rf;
 
+	rcu_read_lock();
 	write_lock_irq(&tasklist_lock);
 	for_each_process(task) {
 		if (!task_is_bore_eligible(task)) continue;
@@ -137,6 +139,7 @@ static void reset_task_weights_bore(void
 		rq_unlock_irqrestore(rq, &rf);
 	}
 	write_unlock_irq(&tasklist_lock);
+	rcu_read_unlock();
 }
 
 int sched_bore_update_handler(const struct ctl_table *table, int write,
@@ -171,17 +174,22 @@ static void update_burst_cache(struct sc
 	bc->timestamp = now;
 }
 
-static inline void update_child_burst_direct(struct task_struct *p, u64 now) {
+static inline u32 update_child_burst_direct(struct task_struct *p, u64 now, u8 depth) {
 	u32 cnt = 0, sum = 0;
 	struct task_struct *child;
 
 	for_each_child(p, child) {
 		if (!task_is_bore_eligible(child)) continue;
-		cnt++;
+
+		if (depth && !list_empty(&child->children))
+			sum += update_child_burst_direct(child, now, depth - 1);
+
 		sum += child->se.burst_penalty;
+		cnt++;
 	}
 
 	update_burst_cache(&p->se.child_burst, p, cnt, sum, now);
+	return sum;
 }
 
 static inline u8 inherit_burst_direct(
@@ -191,8 +199,8 @@ static inline u8 inherit_burst_direct(
 	if (clone_flags & CLONE_PARENT)
 		parent = parent->real_parent;
 
-	if (burst_cache_expired(&parent->se.child_burst, now))
-		update_child_burst_direct(parent, now);
+	if (burst_cache_expired(&parent->se.child_burst, now) && !list_empty(&parent->children))
+		update_child_burst_direct(parent, now, MAX_DIRECT_DEPTH - 1);
 
 	return parent->se.child_burst.score;
 }
@@ -219,7 +227,8 @@ static void update_child_burst_topologic
 			if (sched_burst_cache_stop_count <= cnt) break;
 			continue;
 		}
-		update_child_burst_topological(dec, now, depth - 1, &cnt, &sum);
+		if (!list_empty(&dec->children))
+			update_child_burst_topological(dec, now, depth - 1, &cnt, &sum);
 	}
 
 	update_burst_cache(&p->se.child_burst, p, cnt, sum, now);
@@ -245,7 +254,7 @@ static inline u8 inherit_burst_topologic
 		base_child_cnt = 1;
 	}
 
-	if (burst_cache_expired(&anc->se.child_burst, now))
+	if (burst_cache_expired(&anc->se.child_burst, now) && !list_empty(&anc->children))
 		update_child_burst_topological(
 			anc, now, sched_burst_fork_atavistic - 1, &cnt, &sum);
 
@@ -288,7 +297,7 @@ void sched_clone_bore(
 	} else {
 		read_lock(&tasklist_lock);
 		now = jiffies_to_nsecs(jiffies);
-		penalty = likely(sched_burst_fork_atavistic) ?
+		penalty = sched_burst_fork_atavistic ?
 			inherit_burst_topological(parent, now, clone_flags):
 			inherit_burst_direct(parent, now, clone_flags);
 		read_unlock(&tasklist_lock);
